# coding: utf-8
# Problem 39 「整数の直角三角形」

# 簡単な方針
#
# 設問より、周囲の長さの合計pと置き、3辺の長さをa,b,cと置く。(a<=b<cとする。)
# このとき、以下の3点が計算する上で重要な法則となる。
# p=a+b+c
# a+b > c <=> 2*p/3 > a+b >= p/2 + 1 and  p/3 < c <= p/2 - 1
# a^2 + b^2 = c^2
# 今回は、p<=1000以内であればよく、その際のaとbを縛る最も強烈な条件は、
# 2*p/3 > a+b >= p/2 + 1 and  p/3 < c <= p/2 - 1
# ここにp=1000を代入すると、667>666 >= a+b >= 501
# 下限は今回に関しては無視することにして、a+bが合計して最大666より大きくはならないという点からアルゴリズムを構築する。
#
# (1)1から665までの値域で2重ループを回す。(それぞれaとbの取りうる範囲の意味)
# (2)a+b>=667となる場合には題意を満たさないことが確定するので計算を打ち切る。(これで計算量が665^2より大きく減少する。)
# (3)三平方の定理からcの値を導出し、それが整数ならばメモのa+b+cの数値を1増やす。
# (4)ループ終了時にメモに残っている最も大きな数値のインデックスを返せばOK

def euler039
	memo = Array.new(1001,0)
	1.upto(665) do |a|
		1.upto(665) do |b|
			next if (a+b) >= 667
			c = Math.sqrt(a**2+b**2)
			memo[a+b+c.to_i] += 1 if c.ceil == c.floor && a+b+c.to_i <= 1000
		end
	end
	return memo.index(memo.max)
end
euler039