# coding: utf-8
# Problem 40 「チャンパーノウン定数」 

# 簡単な方針
#
# Rubyさんといえども無理やり100万桁の数字を作って数値を取り出すのは正気の沙汰ではない。
# 欲しいのはn_1,n_10,n_100…と、10^n区切りなので、それを利用して地道に探すことにする。
#
# まず、1桁の数字は1～9までで、9桁分を表す。
# 次に、2桁の数字は10～99までで、90*2=180桁分を表す。
# 同様に、3桁の数字は100～999までで、900*3=2700……となり、
# 数値の予想として、n桁の数字は10^(n-1)*n*9として表されそうである。
# 
# このことから、1~100万までの数値をしきい値として、ループを回すことにする。

def euler040
	target = [0,1,10,100,1000,10000,100000,1000000]
	index_num = [0]
	sum = 0
	1.upto(6) do |a|
		index_num << 10**(a-1)*a*9
	end
	p index_num
	#return num_set[1,1].to_i*num_set[10,1].to_i*num_set[100,1].to_i*num_set[1000,1].to_i*num_set[10000,1].to_i*num_set[100000,1].to_i*num_set[10000000,1].to_i
end
euler040