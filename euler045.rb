# coding: utf-8
# Problem 45 「三角数, 五角数, 六角数」

# 簡単な方針
# 
# Problem044で苦労した甲斐を見せつける。
# 
# Tn=n(n+1)/2
# Pn=n(3n-1)/2	
# Hn=n(2n-1)
# これらをそれぞれnの二次関数として捉えると、
# n^2 + n - 2Tn = 0
# 3n^2 - n - 2Pn = 0
# 2n^2 - n - Hn = 0
#
# したがって、解の公式より、
# n = 1/2*{ -1 ± √(1+8Tn)} ※Tnは正の整数より、n = 1/2*{ -1 + √(1+8Tn)}
# n = 1/6*{ 1 ± √(1+24Pn)} ※Pnは正の整数より、n = 1/6*{ 1 + √(1+24Pn)}
# n = 1/4*{ 1 ± √(1+8Hn)} ※Hnは正の整数より、n = 1/4*{ 1 + √(1+8Hn)}
#
# nが整数となる時、Tn、Pn、Hnは三角数であり、五角数であり、六角数である数となる。
# あとはこの数値に合うようにループを走らせて……と考えるとドツボである。
# なぜなら、この数を満たす初項がTn=Pn=Hn=40755と考えると、まず間違いなく次の数値はこの2乗くらいの数値になるはずである。
# にも関わらず、40755から1ずつ足していくのでは計算がいくら時間をかけても終わらない。
# そこで今回はチェックする数が全てある数Aの2乗となるように、カウンターの2乗を中心に計算を行う。
#
# (1)√(1+24*40755)=989からループスタート
# (2)√(1+24Pn) = 990として考え、Pn=(990^2-1)/24が整数になるか評価する。整数になるならTn=(990^2-1)/8とHn=(990^2-1)/4でも試す。
# (3)それをもくぐり抜けたら、公式から、1/2*{ -1 + √(1+8Tn)}と1/6*{ 1 + √(1+24Pn)}と1/4*{ 1 + √(1+8Hn)}が成立するか評価する。
# ※ちなみに、990だとTnとHnで絶対に整数にならない。(1がプラマイされてから2で割られるため)
# 　そこで、開始地点ではカウンタは991とし、カウンタは2ずつ進んでいくことにする

require 'prime'
def euler045
	count = Math.sqrt(1+24*40755).to_i # ループのカウンタ
	ret = 0 # 答えの格納先
	
	while ret == 0 do
		count += 2
		next if (count**2-1)%24 != 0
		p_n = (count**2-1)/24
		next if (1+p_n*8)**0.5 != ((1+p_n*8)**0.5).to_i		
		t_sqrt = h_sqrt = (1+p_n*8)**0.5
		ret = p_n if (count+1)%6 == 0 && (t_sqrt-1)%2 == 0 && (h_sqrt+1)%4 == 0
	end
	return 
end