# coding: utf-8
# Problem 17 「数字の文字数」

# 簡単な方針
# まず、要素が0で長さが1001の配列Aを用意する。(添え字に対応する箇所に、各英数字の文字数を記載する)
# つぎに、対応表が必要な物に関しては手で数値を算出し、配列を作成する。
# 対応表が必要な物は1~20までの数値と30,40,50,60,70,80,90,100,1000の29項目。
# 1 → one →3
# 2 → two →3
# 3 → three →5
# 4 → four →4
# 5 → five →4
# ※めんどくさいから以下割愛
#
# これが完成したら後はループを回して、
# 	・2桁の数字の場合：10の桁と1の桁に分けてそれぞれ該当の数値を足し合わせて格納
#　・3桁の数字の場合：100の桁と10の桁に分けてそれぞれ該当の数値と"and"分の3を足し合わせて格納

def euler017
	arr = Array.new(1001,0)
	
	#スーパー手打ち代入タイム
	arr[1] = 3
	arr[2] = 3
	arr[3] = 5
	arr[4] = 4
	arr[5] = 4
	arr[6] = 3
	arr[7] = 5
	arr[8] = 5
	arr[9] = 4
	arr[10] = 3
	arr[11] = 6
	arr[12] = 6
	arr[13] = 8
	arr[14] = 8
	arr[15] = 7
	arr[16] = 7
	arr[17] = 9
	arr[18] = 8
	arr[19] = 8
	arr[20] = 6
	arr[30] = 6
	arr[40] = 5
	arr[50] = 5
	arr[60] = 5
	arr[70] = 7
	arr[80] = 6
	arr[90] = 6
	arr[1000] = 11
	
	# 100の桁勢はループで代入しておく
	1.upto(9) do |d|
		arr[d*100] = 7 + arr[d]
	end

	#1-100までの数値を先に片づける
	1.upto(100) do |d|
		next if arr[d] != 0 #もう数値の入っている個所は無視
		arr[d] = arr[d%10] + arr[d - d%10]
	end
	
	#101-1000までの数値を片づける
	101.upto(1000) do |d|
		next if arr[d] != 0 #もう数値の入っている個所は無視
		arr[d] = arr[d%100] + arr[d - d%100] + 3
	end	
	
	return arr.inject(:+)
end